# -*- coding: utf-8 -*-
"""multiple_classification_iris_dataset_ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_kKLi_56PkxdWxNqNGDVRGwUCfW0kkF-
"""

from google.colab import files
uploaded = files.upload()

for fn in uploaded.keys():
  print(f'User has uploaded the file {fn} with length {len(uploaded[fn])} bytes')

#Read the data after uploading it
import pandas as pd
import io
data = pd.read_csv(io.StringIO(uploaded['iris.data'].decode('utf-8')),header=None)
data.head()

#importing important libraries
import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam

#Dividing data into X and y
X = data.iloc[:,:4].values
y = data.iloc[:,4].values

#Use the labelencoder
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
y1 = encoder.fit_transform(y)
Y = pd.get_dummies(y1).values

# Do the train-test split
from sklearn.model_selection import train_test_split
X_train, X_test,y_train,y_test = train_test_split(X,Y, test_size=0.3, random_state=0)

# Now create the model of the ANN
model = Sequential()
model.add(Dense(units=4,input_shape=(4,),activation='relu')) #Taking input of 4 and hidden layer of 4 neuron
model.add(Dense(3,activation='softmax'))  # Output into one of the 3

#Let's compile the model
model.compile(optimizer='Adam', loss='categorical_crossentropy',metrics=['accuracy'])

model.fit(X_train,y_train, batch_size=10,epochs=100)

import numpy as np
y_pred = model.predict(X_test)
y_test_class = np.argmax(y_test,axis=1)
y_pred_class = np.argmax(y_pred, axis=1)

from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y_test_class,y_pred_class))
print(confusion_matrix(y_test_class, y_pred_class))

#Accuracy on test set
(16+9+11)/(16+9+9+11)

